<?php

/**
 * @file
 * Contains bundle_redirect.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Implements hook_help().
 */
function bundle_redirect_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the bundle_redirect module.
    case 'help.page.bundle_redirect':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module allows to set a redirect from a node itself') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function bundle_redirect_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();

  // Return if it's new node.
  if ($node->isNew()) {
    return;
  };

  // URL redirect options for administrators.
  $form['url_redirect'] = [
    '#type' => 'details',
    '#title' => t('URL redirect'),
    '#access' => \Drupal::currentUser()->hasPermission('administer redirects'),
    '#group' => 'advanced',
    '#weight' => 100,
  ];
  // Get language.
  $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
  // Get alias of the node.
  $current_alias = \Drupal::service('path.alias_storage')->lookupPathAlias('/node/' . $node->id(), $lang);
  // Get redirects for the given item's internal path or alias.
  $query = \Drupal::database()->select('redirect', 'r');
  $query->fields('r');
  $group = $query->orConditionGroup()
    ->condition('redirect_redirect__uri', 'internal:/node/' . $node->id(), '=')
    ->condition('redirect_redirect__uri', '%internal:/node/' . $node->id() . '?%', 'LIKE')
    ->condition('redirect_redirect__uri', 'internal:' . $current_alias, '=');
  $redirects = $query->condition($group)->orderBy('redirect_source__path')->execute();
  $redirects->allowRowCount = TRUE;
  $destination = '/node/' . $node->id();

  // Get redirects if anything set for the given node.
  if ($redirects->rowCount()) {
    $redirect_list = [];
    $header = ['From', 'Operations'];
    while ($record = $redirects->fetchAssoc()) {
      $redirect_list[] = $record;
    }
    $form['url_redirect']['table'] = bundle_redirect_list_table($redirect_list, $header, $destination, $lang);
  }

  // Add URL redirect link.
  $link = Url::fromRoute('redirect.add', [], [
    'query' => [
      'redirect' => $destination,
      'language' => $lang,
      'destination' => $destination . '/edit',
    ],
  ]);
  $form['url_redirect']['content'] = [
    '#markup' => '<p>' . Link::fromTextAndUrl(t('Add URL redirect to this node'), $link)->toString() . '</p>',
  ];
}

/**
 * Helper function to construct table using a list of redirects.
 */
function bundle_redirect_list_table($redirect_list, $header, $destination, $lang) {
  $rows = [];
  foreach ($redirect_list as $redirect) {
    $row = [];
    $internal_link = Url::fromUri('internal:/' . $redirect['redirect_source__path']);
    $row['source'] = Link::fromTextAndUrl($redirect['redirect_source__path'], $internal_link)->toString();
    $operations = [];
    $operations['edit'] = [
      'title' => t('Edit'),
      'url' => Url::fromUri('internal:/admin/config/search/redirect/edit/' . $redirect['rid'], ['query' => ['language' => $lang, 'destination' => $destination . '/edit']]),
    ];
    $operations['delete'] = [
      'title' => t('delete'),
      'url' => Url::fromUri('internal:/admin/config/search/redirect/delete/' . $redirect['rid'], ['query' => ['language' => $lang, 'destination' => $destination . '/edit']]),
    ];
    $row['operations'] = [
      'data' => [
        '#type' => 'operations',
        '#links' => $operations,
      ],
    ];

    $rows[] = $row;
  }

  $table = [
    '#type' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  ];

  return $table;
}
